def diffactor(G):

    zol = {}

    for e in G.es:

      x = e.source
      y = e.target

      teamX = set(G.neighbors(x)) - set(G.neighbors(y))
      teamY = set(G.neighbors(y)) - set(G.neighbors(x))
      teamM = set(G.neighbors(x)) & set(G.neighbors(y))
      teamX.add(x)
      teamY.add(y)
      if x in teamY:
       teamY.remove(x)

      if y in teamX:
       teamX.remove(y)

      if y in teamM:
       teamM.remove(y)

      if x in teamM:
       teamM.remove(x)

      prev = len(teamX) + len(teamY) + len(teamM)
      total = prev

      while prev < G.vcount():
       tx = teamX.copy()
       ty = teamY.copy()
       for peace in teamM.copy():
        n = set(G.neighbors(peace))
        a = len(n & tx)
        b = len(n & ty)
        if  a > b:
          teamX.add(peace)
          teamM.remove(peace)
        elif a < b:
          teamY.add(peace)
          teamM.remove(peace)

       tx = teamX.copy()
       ty = teamY.copy()
       for free in set(G.vs.indices) - (tx | ty | teamM):
        n = set(G.neighbors(free))
        a = len(n & tx)
        b = len(n & ty)
        if a > b:
          teamX.add(free)
        elif a < b:
          teamY.add(free)

       total = len(teamX) + len(teamY) + len(teamM)
       if total == prev:
        break
       else:
        prev = total

      zol[e.index] = abs(len(teamX) - len(teamY))
    return zol

N = 4
M = 11

for j in range(0, 1000):
  f = gen_sat(N, M, random_cnf(N))
  #f = gen_unsat(N, M)
  g, _ = sat_to_clique(f)
  G = ig.Graph.from_networkx(g)
  a = diffactor(G)

  dd = dict([(G.vs[i]["_nx_name"], [0,0]) for i in G.vs.indices])

  for c in G.largest_cliques():
    for e in c:
      dd[G.vs[e]["_nx_name"]][1] = 1

  d = diffactor(G)

  for e in G.es:
    x = e.source
    y = e.target
    
    res = sum(d.values())

    dd[G.vs[x]["_nx_name"]][0] += res

    dd[G.vs[y]["_nx_name"]][0] += res

  dx, dc = zip(*dd.values())

  rm = set()
  lm = set()

  for x,y in zip(dx, dc):
    if x == max(dx):
     rm.add((x, y))
    elif y == min(dx):
     lm.add((x, y))
  
  sa = False

  for a, b in rm:
     if (a, int(not b)) in rm:
        sa = True
        break
  
  sb = False
  for a, b in lm:
     if (a, int(not b)) in rm:
        sb = True
        break
  

  if sa and sb:
        import plotly.express as px
        fig = px.scatter(x=dx, y = dc, color = dc)
        fig.show()
