def diffactor(G):
    gol = {}
    zol = dict.fromkeys(G.vs.indices, 0)
    for e in G.es:
      x = e.source
      y = e.target

      teamX = set(G.neighbors(x)) - set(G.neighbors(y))
      teamY = set(G.neighbors(y)) - set(G.neighbors(x))
      teamM = set(G.neighbors(x)) & set(G.neighbors(y))
      teamX.add(x)
      teamY.add(y)
      if x in teamY:
       teamY.remove(x)
    
      if y in teamX:
       teamX.remove(y)
    
      if y in teamM:
       teamM.remove(y)
    
      if x in teamM:
       teamM.remove(x)
      
      prev = len(teamX) + len(teamY) + len(teamM)
      total = prev

      while prev < G.vcount():
       tx = teamX.copy()
       ty = teamY.copy()
       for peace in teamM.copy():
        n = set(G.neighbors(peace))
        a = len(n & tx)
        b = len(n & ty)
        if  a > b:
          teamX.add(peace)
          teamM.remove(peace)
        elif a < b:
          teamY.add(peace)
          teamM.remove(peace)
      
       tx = teamX.copy()
       ty = teamY.copy()
       for free in set(G.vs.indices) - (tx | ty | teamM):
        n = set(G.neighbors(free))
        a = len(n & tx)
        b = len(n & ty)
        if a > b:
          teamX.add(free)
        elif a < b:
          teamY.add(free)
       
       total = len(teamX) + len(teamY) + len(teamM)
       if total == prev:
        break
       else:
        prev = total

      gol[e.index] = tuple((len(teamX), len(teamY), len(teamM), total))
      if len(teamX) > len(teamY):
       zol[x] += 1
      else:
       zol[y] += 1
    
    for v in G.vs.indices:
      zol[v] = zol[v] / len(G.neighbors(v))
    
    print(Counter(zol).most_common())

    rog = dict.fromkeys(G.vs.indices, 0)

    for c in G.largest_cliques():
      z = {}

      for cl in c:
        rog[cl] += 1

      for x,y in itertools.combinations(c, 2):
        
        if G.es[G.get_eid(x,y)].source not in z:
          z[G.es[G.get_eid(x,y)].source] = [0,0]

        if G.es[G.get_eid(x,y)].target not in z:
          z[G.es[G.get_eid(x,y)].target] = [0,0]
        
        if gol[G.get_eid(x,y)][0] > gol[G.get_eid(x,y)][1]:
          z[G.es[G.get_eid(x,y)].source][0] += 1
        elif gol[G.get_eid(x,y)][0] < gol[G.get_eid(x,y)][1]:
          z[G.es[G.get_eid(x,y)].target][0] += 1
        
        z[G.es[G.get_eid(x,y)].source][1] += 1
        z[G.es[G.get_eid(x,y)].target][1] += 1
      
      r = list()
      for a,b in z.values():
          r.append(a / b)

      if 0.0 in r or 1.0 in r:
        print(rog)
        return True
    
    print(rog)
    return False
