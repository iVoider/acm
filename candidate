def kern(G):
 routes = {}

 for x,y in itertools.combinations(G.vs.indices, 2):
   paths = G.get_shortest_paths(x, to=y, output="epath")
   routes[(x,y)] = random.choice(paths)

 swap = routes.copy()

 while True:

  routes_status = {}
  edges_status = dict([(i, []) for i in G.es.indices])
  cur = 0
  prev = len(routes)

  for tup in routes:
    routes_status[tup] = -1

  while routes_status:

   for tup in routes_status.copy():
    if cur == len(routes[tup]):
      del routes[tup]
      del routes_status[tup]
    else:
      routes_status[tup] = routes[tup][cur]
      edges_status[routes_status[tup]].append(tup)

   for e in G.es.indices:
    if len(edges_status[e]) > 1:
     for stat in edges_status[e]:
       del routes_status[stat]
     edges_status[e] = []

   cur += 1

  if len(routes) == prev:
    break

  prev = routes

 todel = set()
 todel1 = set()

 i = 0

 for tup in routes:
     if G.get_eid(tup[0], tup[1], error=False) != -1:
       if i % 2 == 0:
        todel.add(tup[1])
        todel1.add(tup[0])
       else:
        todel1.add(tup[1])
        todel.add(tup[0])
     i += 1

 return todel, todel1

N = 4
M = 16

sget = set()

for _ in range(0, 1000):
 f = gen_sat(N, M, random_cnf(N))
 g, _ = sat_to_clique(f)
 G = ig.Graph.from_networkx(g)
 tet = set()
 for c in G.largest_cliques():
  a = set([G.vs[i]["_nx_name"] for i in c])
  tet |=a

 j = 0
 while True:
  td, td1 = kern(G)

  if len(td) == 0:
    if G.vcount() == 0 or len(set([G.vs[t]["_nx_name"] for t in td]) & tet) != 0 or len(set([G.vs[t]["_nx_name"] for t in td1]) & tet) != 0:
     print(G.vcount(), len(tet), len(set([G.vs[t]["_nx_name"] for t in td]) & tet), len(set([G.vs[t]["_nx_name"] for t in td1]) & tet))
    break

  H = G.copy()

  if j % 2 == 0:
   G.delete_vertices(td)
  else:
   G.delete_vertices(td1)
  G.vs.select(_degree=0).delete()

  if G.vcount() == 0:
    H = H.copy()
    G = H
    if j % 2 == 0:
     G.delete_vertices(td1)
    else:
     G.delete_vertices(td)

  if G.vcount() == 0:
     G = H
     if G.vcount() == 0 or len(set([G.vs[t]["_nx_name"] for t in td]) & tet) != 0 or len(set([G.vs[t]["_nx_name"] for t in td1]) & tet) != 0:
      print(G.vcount(), len(tet), len(set([G.vs[t]["_nx_name"] for t in td]) & tet), len(set([G.vs[t]["_nx_name"] for t in td1]) & tet))
     break
  j += 1
