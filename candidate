N = 4
M = 16

f = gen_sat(N, M, random_cnf(N))
f = gen_unsat(N, M)
g, _ = sat_to_clique(f)
G = ig.Graph.from_networkx(g)
H = G.copy()

routes = {}
all_paths = {}

for x,y in itertools.combinations(G.vs.indices, 2):
  paths = G.get_shortest_paths(x, to=y, output="epath")
  routes[(x,y)] = paths[0]
  all_paths[(x,y)] = paths

print(len(routes))

swap = routes.copy()

while True:

  routes_status = {}
  edges_status = dict([(i, []) for i in G.es.indices])
  cur = 0
  prev = len(routes)

  for tup in routes:
    routes_status[tup] = -1

  while routes_status:

   for tup in routes_status.copy():
    if cur == len(routes[tup]):
      del routes[tup]
      del routes_status[tup]
    else:
      routes_status[tup] = routes[tup][cur]
      edges_status[routes_status[tup]].append(tup)

   for e in G.es.indices:
    if len(edges_status[e]) > 1:
     for stat in edges_status[e]:
      del routes_status[stat]
     edges_status[e] = []

   cur += 1

  if len(routes) == prev:
    break

  prev = routes

print(len(routes))

p = set()
for tup in routes:
   if G.get_eid(tup[0], tup[1], error=False) == -1:
      p.add(tup[0])
      p.add(tup[1])

p = p
print(len(p))


szn = set()
for c in H.largest_cliques():
  tar = set()
  for x,y in itertools.combinations(c, 2):
      tar.add(H.get_eid(x, y))
  szn.add((len(p & tar)))

print((szn))
