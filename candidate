def diffactor(G, k):

    zol = dict.fromkeys(G.es.indices)

    for e in G.es:
      
      x = e.source
      y = e.target

      teamX = set(G.neighbors(x)) - set(G.neighbors(y))
      teamY = set(G.neighbors(y)) - set(G.neighbors(x))
      teamM = set(G.neighbors(x)) & set(G.neighbors(y))
      teamX.add(x)
      teamY.add(y)
      if x in teamY:
       teamY.remove(x)

      if y in teamX:
       teamX.remove(y)

      if y in teamM:
       teamM.remove(y)

      if x in teamM:
       teamM.remove(x)

      prev = len(teamX) + len(teamY) + len(teamM)
      total = prev

      while prev < G.vcount():
       tx = teamX.copy()
       ty = teamY.copy()
       for peace in teamM.copy():
        n = set(G.neighbors(peace))
        a = len(n & tx)
        b = len(n & ty)
        if  a > b:
          teamX.add(peace)
          teamM.remove(peace)
        elif a < b:
          teamY.add(peace)
          teamM.remove(peace)

       tx = teamX.copy()
       ty = teamY.copy()
       for free in set(G.vs.indices) - (tx | ty | teamM):
        n = set(G.neighbors(free))
        a = len(n & tx)
        b = len(n & ty)
        if a > b:
          teamX.add(free)
        elif a < b:
          teamY.add(free)

       total = len(teamX) + len(teamY) + len(teamM)
       if total == prev:
        break
       else:
        prev = total
      
      zol[e.index] = (len(teamX), len(teamY), len(teamM), total)
    
    winrate = dict([(e, [0,0,0]) for e in G.vs.indices])
    for cl in G.largest_cliques():
      for c in cl:
        winrate[c][2] += 1
      for x, y in itertools.combinations(cl, 2):
        id = G.get_eid(x, y)
        ed = G.es[id]
        res = zol[id]
        if (res[2] > res[0] and res[2] > res[1]) or res[0] == res[1]:
          winrate[ed.source][1] += 1
          winrate[ed.target][1] += 1
        
        if res[0] > res[1]:
          winrate[ed.source][0] += 1
        elif res[0] < res[1]:
          winrate[ed.target][0] += 1
    
    a,b,c = zip(*winrate.values())
    if c[a.index(max(a))] == 0:
     import plotly.express as px
     fig = px.scatter(x=b, y=a, color = c)
     fig.show()
