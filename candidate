def diffactor(G):

    zol = {}

    for x,y,z in itertools.combinations(G.vs.indices, 3):

      teamX = set(G.neighbors(x)) - set(G.neighbors(y)) - set(G.neighbors(z))
      teamY = set(G.neighbors(y)) - set(G.neighbors(x)) - set(G.neighbors(z))
      teamZ = set(G.neighbors(z)) - set(G.neighbors(y)) - set(G.neighbors(x))
      teamM = set(G.neighbors(x)) & set(G.neighbors(y)) & set(G.neighbors(z))

      teamX.add(x)
      teamY.add(y)
      teamZ.add(z)

      if x in teamY:
       teamY.remove(x)

      if y in teamX:
       teamX.remove(y)

      if y in teamZ:
       teamZ.remove(y)

      if x in teamZ:
       teamZ.remove(x)

      if z in teamX:
        teamX.remove(z)

      if z in teamY:
        teamY.remove(z)

      if y in teamM:
       teamM.remove(y)

      if z in teamM:
       teamM.remove(z)

      if x in teamM:
       teamM.remove(x)

      prev = len(teamX) + len(teamY) + len(teamZ) + len(teamM)
      total = prev

      while prev < G.vcount():
       tx = teamX.copy()
       ty = teamY.copy()
       tz = teamZ.copy()

       for peace in teamM.copy():
        n = set(G.neighbors(peace))
        a = len(n & tx)
        b = len(n & ty)
        c = len(n & tz)

        tr = [a, b, c]
        if len(set(tr)) == 3:
         if tr.index(max(a, b, c)) == 0:
          teamX.add(peace)
          teamM.remove(peace)
         elif tr.index(max(a, b, c)) == 1:
          teamY.add(peace)
          teamM.remove(peace)
         elif tr.index(max(a, b, c)) == 2:
          teamZ.add(peace)
          teamM.remove(peace)

       tx = teamX.copy()
       ty = teamY.copy()
       tz = teamZ.copy()

       for free in set(G.vs.indices) - (tx | ty | tz | teamM):
        n = set(G.neighbors(free))
        a = len(n & tx)
        b = len(n & ty)
        c = len(n & tz)

        tr = [a, b, c]
        if len(set(tr)) == 3:
         if tr.index(max(a, b, c)) == 0:
          teamX.add(free)
         elif tr.index(max(a, b, c)) == 1:
          teamY.add(free)
         elif tr.index(max(a, b, c)) == 2:
          teamZ.add(free)

       total = len(teamX) + len(teamY) + len(teamM) + len(teamZ)
       if total == prev:
        break
       else:
        prev = total

      zol[(x,y,z)] = (frozenset(Counter((x,y,z)).most_common()), len(teamM))
    return frozenset(Counter(zol.values()).most_common())
