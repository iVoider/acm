N = 4
M = 9

satis = True

for _ in range(0, 100):
 f = gen_sat(N, M, random_cnf(N)) if satis else gen_unsat(N, M)
 g, k = sat_to_clique(f)
 G = ig.Graph.from_networkx(g)
 
 forbidden = set()
 forbidden2 = set()

 while True:
   m = solve(G)
   to = None
   for e in reversed(m):
     if len(e[0]) == 1 and G.vs[e[0][0]]["_nx_name"][1] not in forbidden and G.vs[e[0][0]]["_nx_name"][0] not in forbidden2:
      to = G.vs[e[0][0]]["_nx_name"][0]
      forbidden.add(G.vs[e[0][0]]["_nx_name"][1])
      forbidden2.add(G.vs[e[0][0]]["_nx_name"][0] * -1)
      G.delete_vertices(e[0][0])
      break
 
   if to is None:
     break
   
   todel = set()
   for v in G.vs:
    if (v["_nx_name"][1] not in forbidden) and (v["_nx_name"][0] == to):
     todel.add(v)
     forbidden.add(v["_nx_name"][1])
   
   G.delete_vertices(todel)
 
 if G.clique_number() < 9:
   print(f)
 else:
   print(G.vcount())
